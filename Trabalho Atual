#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#define TAMANHO_MATRIZ 8
#define MAX 36 // Tamanho máximo da pilha
#define MATRIZ4X4 4

char Pilha[MAX]; // Pilha
int top = -1; // Topo da pilha
int PRIMEIRA_PECA=1;

void passarCreditos(){
    printf("\033[38;2;128;0;128m");
    printf("Créditos:\n");
    sleep(2);
    printf("\033[38;2;255;0;0m");
    printf("Programadores:\n");
    sleep(2);
    printf("José William\n");
    sleep(2);
    printf("Selso\n");
    sleep(2);
    printf("\033[38;2;255;165;0m");
    printf("Criador:\n");
    sleep(2);
    printf("Roberto Hugo\n");
    sleep(6);
    system("cls");
}

void inicializarMatriz(char ***matriz) {
    *matriz = (char **)malloc(TAMANHO_MATRIZ * sizeof(char *));
    for (int i = 0; i < TAMANHO_MATRIZ; i++) {
        (*matriz)[i] = (char *)malloc(TAMANHO_MATRIZ * sizeof(char));
        for (int j = 0; j < TAMANHO_MATRIZ; j++) {
            (*matriz)[i][j] = ' ';
        }
    }
}

// Função para embaralhar
void Randomizar(char *numero, int n) {
    srand(time(NULL));
    if (n > 1) {
        int i;
        for (i = 0; i < n - 1; i++) {
          int j = i + rand() / (RAND_MAX / (n - i) + 1);
          char t = numero[j];
          numero[j] = numero[i];
          numero[i] = t;
        }
    }
}

void imprimirMatriz(char **matriz, int fase, char *letras, int* pecaA, int* pecaB, int* pecaC, int* pecaD, int* pecaE, int* pecaF) {
    printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
    system("cls");
    printf("\033[0;31m"); // Vermelho
    if (fase==3){
        printf("                           ===============================\n");
        printf("                                       INTRIGA\n");
        printf("                           ===============================\n");
    }
    if(fase==2){
        printf("                           ================================\n");
        printf("                             FASE       DE       EXPANSÃO\n");
        printf("                           ================================\n");}


    printf("\033[0m"); // Reset para a cor padrão

    printf("\033[38;2;200;162;200m"); // Lilás
    printf("                               1    2    3    4    5    6\n");

    for (int i = 1; i < TAMANHO_MATRIZ-1; i++) {
        printf("\033[38;2;200;162;200m"); // Lilás
        printf("                           ");
        if (i<9)
        printf("%d ", i);
        for (int j = 1; j < TAMANHO_MATRIZ-1; j++) {
            switch(matriz[i][j]) {
                case 'A':
                    printf("\033[0;31m"); // Vermelho
                    break;
                case 'B':
                    printf("\033[0;32m"); // Verde
                    break;
                case 'C':
                    printf("\033[0;33m"); // Amarelo
                    break;
                case 'D':
                    printf("\033[0;34m"); // Azul
                    break;
                case 'E':
                    printf("\033[0;35m"); // Magenta
                    break;
                case 'F':
                    printf("\033[0;36m"); // Ciano
                    break;
                default:
                    printf("\033[0m"); // Reset para a cor padrão
            }
            printf("[%2c ]", matriz[i][j]);
            printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
        }
        printf("\n\n");}
printf("                            0     1     2     3     4     6 \n");
    if (*pecaA == 1){
        printf("\033[0;31m"); // Vermelho
        printf("                           [%c]", letras[0]);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
    }
    else
        printf("                           [-]");

    if (*pecaB == 1){
        printf("\033[0;32m"); // Verde
        printf("   [%c]", letras[1]);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
    }
    else
        printf("   [-]");

    if (*pecaC == 1){
        printf("\033[0;33m"); // Amarelo
        printf("   [%c]", letras[2]);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
    }
    else
        printf("   [-]");

    if (*pecaD == 1){
        printf("\033[0;34m"); // Azul
        printf("   [%c]", letras[3]);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
    }
    else
        printf("   [-]");

    if (*pecaE == 1){
        printf("\033[0;35m"); // Magenta
        printf("   [%c]", letras[4]);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça

    }
    else
        printf("   [-]");

    if (*pecaF == 1){
        printf("\033[0;36m"); // Ciano
        printf("   [%c]\n", letras[5]);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
    }
    else
        printf("   [-]\n");
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça

    }


// Tira uma peça do topo da pilha
char Tirar (char *letters, int *proxima) {
    if (*proxima == -1) {
        printf("A pilha está vazia.\n");
        return '\0'; // retorna nulo se a pilha estiver vazia
    } else {
        (*proxima)--; // decrementa o topo da pilha
        return letters[*proxima]; // retorna o elemento do topo da pilha
    }
}

int matrizCheia(char **matriz) {
    int cheia = 0;
    for (int i = 1; i < TAMANHO_MATRIZ-1; i++) {
        for (int j = 1; j < TAMANHO_MATRIZ-1; j++) {
            if (matriz[i][j] == ' '){
                cheia++;
            }
        }
    }
    if (cheia>0)
    return 0; // A matriz ainda não está cheia
    return 1; // A matriz está cheia
}

void PreencherPilha(char *letters) {
    for (int i = MAX-1; i >= 0; i--) {
        Pilha[MAX-1-i] = letters[i];
    }
    top = MAX;
}

int pode(char **matriz, int x, int y ) {
    if (PRIMEIRA_PECA==1){
        PRIMEIRA_PECA=0;
        return 1;}// Primeira Peça
    if (x > 0 && matriz[x - 1][y] != ' ')
        return 1; // Acima
    if (x < TAMANHO_MATRIZ - 1 && matriz[x + 1][y] != ' ')
        return 1; // Abaixo
    if (y > 0 && matriz[x][y - 1] != ' ')
        return 1; // À esquerda
    if (y < TAMANHO_MATRIZ - 1 && matriz[x][y + 1] != ' ')
        return 1; // À direita
    return 0; // Nenhuma posição adjacente preenchida
}

/*char TRANCADESGRACA(){
int Atranca=0, Btranca=0, Ctranca=0, Dtranca=0, Etranca=0, Ftranca=0;
printf("QUAL FICHA VOCE VAI TRANCAR?")
scanf("%c",)

}*/


void trocarPecas(char **matriz, int x1, int y1, int x2, int y2) {
    // Verifica se as peças estão adjacentes
    if ((abs(x1 - x2) == 1 && y1 == y2) || (abs(y1 - y2) == 1 && x1 == x2)) {
        // Troca as peças
        char temp = matriz[x1][y1];
        matriz[x1][y1] = matriz[x2][y2];
        matriz[x2][y2] = temp;
    } else {
        printf("As peças não estão adjacentes e não podem ser trocadas.\n");
    }
}

void FichasReveladas(int num, char *letras, int* pecaA, int* pecaB, int* pecaC, int* pecaD, int* pecaE, int* pecaF){
    switch (num) {
        case 0:
            *pecaA = 1;
            break;
        case 1:
            *pecaB = 1;
            break;
        case 2:
            *pecaC = 1;
            break;
        case 3:
            *pecaD = 1;
            break;
        case 4:
            *pecaE = 1;
            break;
        case 6:
            *pecaF = 1;
            break;
    }

    if (*pecaA == 1)
        printf(" 0 = [%c]\n", letras[0]);
    else
        printf(" 0 = [-]\n");

    if (*pecaB == 1)
        printf(" 1 = [%c]\n", letras[1]);
    else
        printf(" 1 = [-]\n");

    if (*pecaC == 1)
        printf(" 2 = [%c]\n", letras[2]);
    else
        printf(" 2 = [-]\n");

    if (*pecaD == 1)
        printf(" 3 = [%c]\n", letras[3]);
    else
        printf(" 3 = [-]\n");

    if (*pecaE == 1)
        printf(" 4 = [%c]\n", letras[4]);
    else
        printf(" 4 = [-]\n");

    if (*pecaF == 1)
        printf(" 6 = [%c]\n", letras[5]);
    else
        printf(" 6 = [-]\n");
}

int main() {
    setlocale(LC_ALL, "Portuguese");
        int Jogador = 0, Modos;
   while (Jogador!= 1){
    system("cls"); // Limpa a tela
        printf("\033[38;2;255;255;0m"); // Amarelo
        printf(" ______              _       _     _       \n");
        printf("(_____ \\            (_)     (_)   | |      \n");
        printf(" _____) )_____  ____ _  ____ _  __| |_____ \n");
        printf("|  __  /| ___ |/ _  | |/ ___) |/ _  (____ |\n");
        printf("| |  \\ \\| ____( (_| | ( (___| ( (_| / ___ |\n");
        printf("|_|   |_|_____)\___  |_| \____)_|\_____\\_____|\n");
        printf("              (_____|                       \n");
        printf("\033[0m"); // Reseta
        printf("\033[38;2;255;165;0m");
        printf("\nJogar = 1\n");
        printf("Créditos = 2\n");
        printf("Sair = 3\n");
        scanf("%d", &Jogador);
        system("cls"); // Limpa a tela
        printf("\033[0m");


    if (Jogador == 2)
        passarCreditos();

    else if (Jogador == 1){
        system("cls");
    }
    else if (Jogador == 3){
        printf("Que pena! Espero que você volte!");
        exit(0);
    }}
    int TENTANDO=0;
    while(TENTANDO!=1 && TENTANDO!=2 && TENTANDO!=3){
        printf("\033[38;2;255;255;0m");
        printf("Modos:\n");
        printf("     Fácil = 1\n");
        printf("     Médio = 2 \n");
        printf("     Difícil = 3 \n");
        scanf("%d",&TENTANDO);
        printf("\033[0m");
        }


char letras[6] = {'A', 'B', 'C', 'D', 'E', 'F'};
int fichas[6] = {0, 1, 2, 3, 4, 6};
int usados[7] = {0};  // Array para marcar quais quantidades já foram usadas
int reveladas[6] = {0}; // Array para marcar quais letras foram reveladas
int index, PA=0,PB=0,PC=0,PD=0,PE=0,PF=0;

srand(time(0));

system("cls");
char letra='H';

    // Atribui uma quantidade aleatória de fichas para cada letra
    for (int i = 0; i < 6; i++) {
        do {
            index = rand() % 7;  // Gera um índice aleatório de 0 a 6
        } while (usados[index] || index == 5);  // Continua gerando até encontrar um índice não usado e diferente de 5
        fichas[i] = index;  // Atribui a quantidade de fichas correspondente ao índice
        usados[index] = 1;  // Marca o índice como usado
    }
    int G=3, num=10;
    printf("Insira o número da ficha que você deseja revelar:\n");

    Randomizar(letras, 6);
int fase=1;
while(TENTANDO-2<G){
        FichasReveladas(num, letras, &PA, &PB, &PC, &PD, &PE, &PF);
        do {
        if(scanf("%d", &num) != 1){
        while (getchar() != '\n');
        }
        if(num==0)
        if(PA==1){
        num=-1;}
        if(num==1)
        if(PB==1){
        num=-1;}
        if(num==2)
        if(PC==1){
        num=-1;}
        if(num==3)
        if(PD==1){
        num=-1;}
        if(num==4)
        if(PE==1){
        num=-1;}
        if(num==6)
        if(PF==1){
        num=-1;}
        } while(num < 0 || num > 6 || num == 5);
        system("cls");
        if(TENTANDO==G)
        printf("\nEscreva outra ficha para passar para a próxima fase\n");
        TENTANDO++;
    }
    char letters[MAX];
    int i, j;
    fase=2;
    char **matriz;
    // Adiciona 6 de cada letra ao array
    for (i = 0; i < 6; i++) {
        for (j = 0; j < 6; j++) {
            letters[j*6 + i] = 'A' + i;
        }
    }


    Randomizar(letters, MAX);
    PreencherPilha(letters);
    inicializarMatriz(&matriz);
    imprimirMatriz(matriz,fase,letras, &PA, &PB, &PC, &PD, &PE, &PF);
    printf("\033[0;33m"); // Amarelo
    printf("Escolha uma posição adjacente (linha e coluna) para colocar a proxima peça 'B' (1 a 6):\n");
    printf("\033[0m"); // Reset para a cor padrão
    while (!matrizCheia(matriz)) {
        int x=0, y=0;
        printf("\033[0;34m"); // Azul
        printf("                                  ===================\n");
        printf("                                     PRóXIMA FICHA\n");
        printf("                                  ===================\n");
        printf("\033[0m"); // Reset para a cor padrão
        printf("\033[0;35m"); // Magenta
        printf("                                  >>>>>>> |%c| <<<<<<<\n", letters[top-1]);
        printf("\033[0m"); // Reset para a cor padrão


    while (x < 1 || x > 6 && y < 1 || y > 6)
        if (scanf("%d %d", &x, &y) != 2) {
        // Limpa o buffer de entrada se a entrada for inválida
        while (getchar() != '\n');{
        x = 0;
        y = 0;
    }
}
        if (x >= 1 && x < 7 && y >= 1 && y < 7 && matriz[x][y] == ' ' && pode(matriz, x, y)==1) {
            matriz[x][y] = Tirar(letters, &top);
            imprimirMatriz(matriz, fase,letras, &PA, &PB, &PC, &PD, &PE, &PF);
        }
        else {
            imprimirMatriz(matriz, fase,letras, &PA, &PB, &PC, &PD, &PE, &PF);
            printf("Posicao invalida. Tente novamente.\n");

        }
    }
    fase=3;
i=0, PA=1,PB=1,PC=1,PD=1,PE=1,PF=1;
while (i!=5){
imprimirMatriz(matriz,fase,letras, &PA, &PB, &PC, &PD, &PE, &PF);
int x1, y1, x2, y2;
printf("Insira as coordenadas da primeira peça (x y): ");
scanf("%d %d", &x1, &y1);
printf("Insira as coordenadas da segunda peça (x y): ");
scanf("%d %d", &x2, &y2);
trocarPecas(matriz, x1, y1, x2, y2);
i++;
}
imprimirMatriz(matriz,fase,letras, &PA, &PB, &PC, &PD, &PE, &PF);
int pontoA=0,pontoB=0,pontoC=0,pontoD=0,pontoE=0,pontoF=0;
for(i=0;i<MATRIZ4X4;i++){
    for(int j=0;j<MATRIZ4X4;j++){
    if(matriz[i+2][j+2]=='A')
    pontoA++;
    if(matriz[i+2][j+2]=='B')
    pontoB++;
    if(matriz[i+2][j+2]=='C')
    pontoC++;
    if(matriz[i+2][j+2]=='D')
    pontoD++;
    if(matriz[i+2][j+2]=='E')
    pontoE++;
    if(matriz[i+2][j+2]=='F')
    pontoF++;}}

        printf("\n\n");
        printf("                                         PONTOS\n");
        printf("                            A     B     C     D     E     F \n");
        printf("\033[0;31m"); // Vermelho
        printf("                           [%d]", pontoA);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
        printf("\033[0;32m"); // Verde
        printf("   [%d]", pontoB);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
        printf("\033[0;33m"); // Amarelo
        printf("   [%d]", pontoC);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
        printf("\033[0;34m"); // Azul
        printf("   [%d]", pontoD);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
        printf("\033[0;35m"); // Magenta
        printf("   [%d]", pontoE);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
        printf("\033[0;36m"); // Ciano
        printf("   [%d]\n", pontoF);
        printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça

return 0;
   }
