#include <stdio.h>
#include <stdlib.h>
#define TAMANHO_MATRIZ 8
#define MAX 36 // Tamanho máximo da pilha

char Pilha[MAX]; // Pilha
int top = -1; // Topo da pilha
int PRIMEIRA_PECA=1;

void passarCreditos(){
    printf("\033[38;2;128;0;128m");
    printf("Creditos:\n");
    sleep(2);
    printf("\033[38;2;255;0;0m");
    printf("Programadores:\n");
    sleep(2);
    printf("Jose William\n");
    sleep(2);
    printf("Selso\n");
    sleep(2);
    printf("\033[38;2;255;165;0m");
    printf("Criador:\n");
    sleep(2);
    printf("Roberto Hugo\n");
    sleep(6);
    system("cls");
}

void inicializarMatriz(char ***matriz) {
    *matriz = (char **)malloc(TAMANHO_MATRIZ * sizeof(char *));
    for (int i = 0; i < TAMANHO_MATRIZ; i++) {
        (*matriz)[i] = (char *)malloc(TAMANHO_MATRIZ * sizeof(char));
        for (int j = 0; j < TAMANHO_MATRIZ; j++) {
            (*matriz)[i][j] = ' ';
        }
    }
}

// Função para embaralhar
void Randomizar(char *numero, int n) {
    srand(time(NULL));
    if (n > 1) {
        int i;
        for (i = 0; i < n - 1; i++) {
          int j = i + rand() / (RAND_MAX / (n - i) + 1);
          char t = numero[j];
          numero[j] = numero[i];
          numero[i] = t;
        }
    }
}

void imprimirMatriz(char **matriz, int fase) {
    system("cls");
    printf("\033[0;31m"); // Vermelho
    if(fase==2){
        printf("                           ================================\n");
        printf("                             FASE       DE       EXPANSAO\n");
        printf("                           ================================\n");
    }

    printf("\033[0m"); // Reset para a cor padrão

    printf("\033[38;2;200;162;200m"); // Lilás
    printf("                               1    2    3    4    5    6\n");

    for (int i = 1; i < TAMANHO_MATRIZ-1; i++) {
        printf("\033[38;2;200;162;200m"); // Lilás
        printf("                           ");
        if (i<9)
        printf("%d ", i);
        for (int j = 1; j < TAMANHO_MATRIZ-1; j++) {
            switch(matriz[i][j]) {
                case 'A':
                    printf("\033[0;31m"); // Vermelho
                    break;
                case 'B':
                    printf("\033[0;32m"); // Verde
                    break;
                case 'C':
                    printf("\033[0;33m"); // Amarelo
                    break;
                case 'D':
                    printf("\033[0;34m"); // Azul
                    break;
                case 'E':
                    printf("\033[0;35m"); // Magenta
                    break;
                case 'F':
                    printf("\033[0;36m"); // Ciano
                    break;
                default:
                    printf("\033[0m"); // Reset para a cor padrão
            }
            printf("[%2c ]", matriz[i][j]);
            printf("\033[0m"); // Reset para a cor padrão após imprimir cada peça
        }
        printf("\n\n");
    }
}


// Tira uma peça do topo da pilha
char Tirar (char *letters, int *proxima) {
    if (*proxima == -1) {
        printf("A pilha está vazia.\n");
        return '\0'; // retorna nulo se a pilha estiver vazia
    } else {
        (*proxima)--; // decrementa o topo da pilha
        return letters[*proxima]; // retorna o elemento do topo da pilha
    }
}

int matrizCheia(char **matriz) {
    int cheia = 0;
    for (int i = 1; i < TAMANHO_MATRIZ-1; i++) {
        for (int j = 1; j < TAMANHO_MATRIZ-1; j++) {
            if (matriz[i][j] == ' '){
                cheia++;
            }
        }
    }
    if (cheia>0)
    return 0; // A matriz ainda não está cheia
    return 1; // A matriz está cheia
}

void PreencherPilha(char *letters) {
    for (int i = MAX-1; i >= 0; i--) {
        Pilha[MAX-1-i] = letters[i];
    }
    top = MAX;
}

int pode(char **matriz, int x, int y ) {
    if (PRIMEIRA_PECA==1){
        PRIMEIRA_PECA=0;
        return 1;}// Primeira Peça
    if (x > 0 && matriz[x - 1][y] != ' ')
        return 1; // Acima
    if (x < TAMANHO_MATRIZ - 1 && matriz[x + 1][y] != ' ')
        return 1; // Abaixo
    if (y > 0 && matriz[x][y - 1] != ' ')
        return 1; // À esquerda
    if (y < TAMANHO_MATRIZ - 1 && matriz[x][y + 1] != ' ')
        return 1; // À direita
    return 0; // Nenhuma posição adjacente preenchida
}

void trocarPecas(char **matriz, int x1, int y1, int x2, int y2) {
    // Verifica se as peças estão adjacentes
    if ((abs(x1 - x2) == 1 && y1 == y2) || (abs(y1 - y2) == 1 && x1 == x2)) {
        // Troca as peças
        char temp = matriz[x1][y1];
        matriz[x1][y1] = matriz[x2][y2];
        matriz[x2][y2] = temp;
    } else {
        printf("As peças não estão adjacentes e não podem ser trocadas.\n");
    }
}


int main() {
        int Jogador = 0;
    system("cls"); // Limpa a tela
    while (Jogador != 3) {
        printf("\033[38;2;255;255;0m"); // Define a cor do texto como amarelo RGB
        printf(" ______              _       _     _       \n");
        printf("(_____ \\            (_)     (_)   | |      \n");
        printf(" _____) )_____  ____ _  ____ _  __| |_____ \n");
        printf("|  __  /| ___ |/ _  | |/ ___) |/ _  (____ |\n");
        printf("| |  \\ \\| ____( (_| | ( (___| ( (_| / ___ |\n");
        printf("|_|   |_|_____)\___  |_| \____)_|\_____\\_____|\n");
        printf("              (_____|                       \n");
        printf("\033[0m"); // Reseta as cores para o padrão do terminal
        printf("\033[38;2;255;165;0m");
        printf("\nJogar = 1\n");
        printf("Creditos = 2\n");
        printf("Sair = 3\n");
        scanf("%d", &Jogador);
        system("cls"); // Limpa a tela
        printf("\033[0m");

    if (Jogador == 1){
    int Modos=0;
        system("cls");
    while(Modos!=1 && Modos!=2 && Modos!=3){
        printf("Modos:\n");
        printf("     Facil = 1\n");
        printf("     Medio = 2 \n");
        printf("     Dificil = 3 \n");
        scanf("%d",&Modos);
    }
    break;
    }
    else if (Jogador == 2)
        passarCreditos();
    else if (Jogador == 3){
        printf("Que pena!, espero que voce volte.");
        exit(0);
    }

    }

    char letters[MAX];
    int i, fase=2, j;
    char **matriz;
    // Adiciona 6 de cada letra ao array
    for (i = 0; i < 6; i++) {
        for (j = 0; j < 6; j++) {
            letters[j*6 + i] = 'A' + i;
        }
    }
    Randomizar(letters, MAX);
    PreencherPilha(letters);
    inicializarMatriz(&matriz);
    imprimirMatriz(matriz,fase);
    printf("\033[0;33m"); // Amarelo
    printf("Escolha uma posicao adjacente (linha e coluna) para colocar a proxima peça 'B' (1 a 6):\n");
    printf("\033[0m"); // Reset para a cor padrão
    while (!matrizCheia(matriz)) {
        int x=0, y=0;
        printf("\033[0;34m"); // Azul
        printf("                                  ===================\n");
        printf("                                     PROXIMA FICHA\n");
        printf("                                  ===================\n");
        printf("\033[0m"); // Reset para a cor padrão
        printf("\033[0;35m"); // Magenta
        printf("                                  >>>>>>> |%c| <<<<<<<\n", letters[top-1]);
        printf("\033[0m"); // Reset para a cor padrão


    while (x < 1 || x > 6 && y < 1 || y > 6)
        if (scanf("%d %d", &x, &y) != 2) {
        // Limpa o buffer de entrada se a entrada for inválida
        while (getchar() != '\n');{
        x = 0;
        y = 0;
    }
}
        if (x >= 1 && x < 7 && y >= 1 && y < 7 && matriz[x][y] == ' ' && pode(matriz, x, y)==1) {
            matriz[x][y] = Tirar(letters, &top);
            imprimirMatriz(matriz, fase);
        }
        else {
            imprimirMatriz(matriz, fase);
            printf("Posicao invalida. Tente novamente.\n");

        }
    }

while (1){
imprimirMatriz(matriz,fase);
int x1, y1, x2, y2;
printf("Insira as coordenadas da primeira peça (x y): ");
scanf("%d %d", &x1, &y1);
printf("Insira as coordenadas da segunda peça (x y): ");
scanf("%d %d", &x2, &y2);
trocarPecas(matriz, x1, y1, x2, y2);
}
}
